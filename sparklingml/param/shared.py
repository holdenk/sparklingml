#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# DO NOT MODIFY THIS FILE! It was generated by
# _shared_params_code_gen.py.

from pyspark.ml.param import *


class HasStopwordCase(Params):
    """
    Mixin for param stopwordCase:
    If the case should be considered when filtering stopwords
    """

    stopwordCase = Param(
        Params._dummy(),
        "stopwordCase",
        "If the case should be considered when filtering stopwords",
        typeConverter=TypeConverters.toBoolean)

    def __init__(self):
        super(HasStopwordCase, self).__init__()
        self._setDefault(stopwordCase=False)

    def setStopwordCase(self, value):
        """
        Sets the value of :py:attr:`stopwordCase`.
        """
        return self._set(stopwordCase=value)

    def getStopwordCase(self):
        """
        Gets the value of stopwordCase or its default value.
        """
        return self.getOrDefault(self.stopwordCase)


class HasStopwords(Params):
    """
    Mixin for param stopwords:
    Stopwords to be filtered. Default depends on underlying transformer
    """

    stopwords = Param(
        Params._dummy(),
        "stopwords",
        "Stopwords to be filtered. Default depends on underlying transformer",
        typeConverter=TypeConverters.toListString)

    def __init__(self):
        super(HasStopwords, self).__init__()

    def setStopwords(self, value):
        """
        Sets the value of :py:attr:`stopwords`.
        """
        return self._set(stopwords=value)

    def getStopwords(self):
        """
        Gets the value of stopwords or its default value.
        """
        return self.getOrDefault(self.stopwords)
