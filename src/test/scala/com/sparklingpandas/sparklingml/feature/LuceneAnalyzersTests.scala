/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sparklingpandas.sparklingml.feature

import org.apache.spark.ml.param._
import org.apache.spark.ml.util.Identifiable

import org.apache.lucene.analysis.Analyzer

import com.sparklingpandas.sparklingml.param._

// DO NOT MODIFY THIS FILE! It was auto generated by LuceneAnalyzerGenerators

    
/**
 * A super simple test
 */
class ArabicAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[ArabicAnalyzerLucene] {
    val transformer = new ArabicAnalyzerLucene()
}

/**
 * A super simple test
 */
class BulgarianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[BulgarianAnalyzerLucene] {
    val transformer = new BulgarianAnalyzerLucene()
}

/**
 * A super simple test
 */
class BrazilianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[BrazilianAnalyzerLucene] {
    val transformer = new BrazilianAnalyzerLucene()
}

/**
 * A super simple test
 */
class CatalanAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[CatalanAnalyzerLucene] {
    val transformer = new CatalanAnalyzerLucene()
}

/**
 * A super simple test
 */
class CJKAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[CJKAnalyzerLucene] {
    val transformer = new CJKAnalyzerLucene()
}

/**
 * A super simple test
 */
class SoraniAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[SoraniAnalyzerLucene] {
    val transformer = new SoraniAnalyzerLucene()
}

/**
 * A super simple test
 */
class KeywordAnalyzerLuceneTest
    extends LuceneTransformerTest[KeywordAnalyzerLucene] {
    val transformer = new KeywordAnalyzerLucene()
}

/**
 * A super simple test
 */
class SimpleAnalyzerLuceneTest
    extends LuceneTransformerTest[SimpleAnalyzerLucene] {
    val transformer = new SimpleAnalyzerLucene()
}

/**
 * A super simple test
 */
class StopAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[StopAnalyzerLucene] {
    val transformer = new StopAnalyzerLucene()
}

/**
 * A super simple test
 */
class UnicodeWhitespaceAnalyzerLuceneTest
    extends LuceneTransformerTest[UnicodeWhitespaceAnalyzerLucene] {
    val transformer = new UnicodeWhitespaceAnalyzerLucene()
}

/**
 * A super simple test
 */
class WhitespaceAnalyzerLuceneTest
    extends LuceneTransformerTest[WhitespaceAnalyzerLucene] {
    val transformer = new WhitespaceAnalyzerLucene()
}

/**
 * A super simple test
 */
class CzechAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[CzechAnalyzerLucene] {
    val transformer = new CzechAnalyzerLucene()
}

/**
 * A super simple test
 */
class DanishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[DanishAnalyzerLucene] {
    val transformer = new DanishAnalyzerLucene()
}

/**
 * A super simple test
 */
class GermanAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[GermanAnalyzerLucene] {
    val transformer = new GermanAnalyzerLucene()
}

/**
 * A super simple test
 */
class GreekAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[GreekAnalyzerLucene] {
    val transformer = new GreekAnalyzerLucene()
}

/**
 * A super simple test
 */
class EnglishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[EnglishAnalyzerLucene] {
    val transformer = new EnglishAnalyzerLucene()
}

/**
 * A super simple test
 */
class SpanishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[SpanishAnalyzerLucene] {
    val transformer = new SpanishAnalyzerLucene()
}

/**
 * A super simple test
 */
class BasqueAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[BasqueAnalyzerLucene] {
    val transformer = new BasqueAnalyzerLucene()
}

/**
 * A super simple test
 */
class PersianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[PersianAnalyzerLucene] {
    val transformer = new PersianAnalyzerLucene()
}

/**
 * A super simple test
 */
class FinnishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[FinnishAnalyzerLucene] {
    val transformer = new FinnishAnalyzerLucene()
}

/**
 * A super simple test
 */
class FrenchAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[FrenchAnalyzerLucene] {
    val transformer = new FrenchAnalyzerLucene()
}

/**
 * A super simple test
 */
class IrishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[IrishAnalyzerLucene] {
    val transformer = new IrishAnalyzerLucene()
}

/**
 * A super simple test
 */
class GalicianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[GalicianAnalyzerLucene] {
    val transformer = new GalicianAnalyzerLucene()
}

/**
 * A super simple test
 */
class HindiAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[HindiAnalyzerLucene] {
    val transformer = new HindiAnalyzerLucene()
}

/**
 * A super simple test
 */
class HungarianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[HungarianAnalyzerLucene] {
    val transformer = new HungarianAnalyzerLucene()
}

/**
 * A super simple test
 */
class ArmenianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[ArmenianAnalyzerLucene] {
    val transformer = new ArmenianAnalyzerLucene()
}

/**
 * A super simple test
 */
class IndonesianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[IndonesianAnalyzerLucene] {
    val transformer = new IndonesianAnalyzerLucene()
}

/**
 * A super simple test
 */
class ItalianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[ItalianAnalyzerLucene] {
    val transformer = new ItalianAnalyzerLucene()
}

/**
 * A super simple test
 */
class JapaneseAnalyzerLuceneTest
    extends LuceneTransformerTest[JapaneseAnalyzerLucene] {
    val transformer = new JapaneseAnalyzerLucene()
}

/**
 * A super simple test
 */
class LithuanianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[LithuanianAnalyzerLucene] {
    val transformer = new LithuanianAnalyzerLucene()
}

/**
 * A super simple test
 */
class LatvianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[LatvianAnalyzerLucene] {
    val transformer = new LatvianAnalyzerLucene()
}

/**
 * A super simple test
 */
class DutchAnalyzerLuceneTest
    extends LuceneTransformerTest[DutchAnalyzerLucene] {
    val transformer = new DutchAnalyzerLucene()
}

/**
 * A super simple test
 */
class NorwegianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[NorwegianAnalyzerLucene] {
    val transformer = new NorwegianAnalyzerLucene()
}

/**
 * A super simple test
 */
class PortugueseAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[PortugueseAnalyzerLucene] {
    val transformer = new PortugueseAnalyzerLucene()
}

/**
 * A super simple test
 */
class RomanianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[RomanianAnalyzerLucene] {
    val transformer = new RomanianAnalyzerLucene()
}

/**
 * A super simple test
 */
class RussianAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[RussianAnalyzerLucene] {
    val transformer = new RussianAnalyzerLucene()
}

/**
 * A super simple test
 */
class ShingleAnalyzerWrapperLuceneTest
    extends LuceneTransformerTest[ShingleAnalyzerWrapperLucene] {
    val transformer = new ShingleAnalyzerWrapperLucene()
}

/**
 * A super simple test
 */
class ClassicAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[ClassicAnalyzerLucene] {
    val transformer = new ClassicAnalyzerLucene()
}

/**
 * A super simple test
 */
class StandardAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[StandardAnalyzerLucene] {
    val transformer = new StandardAnalyzerLucene()
}

/**
 * A super simple test
 */
class UAX29URLEmailAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[UAX29URLEmailAnalyzerLucene] {
    val transformer = new UAX29URLEmailAnalyzerLucene()
}

/**
 * A super simple test
 */
class SwedishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[SwedishAnalyzerLucene] {
    val transformer = new SwedishAnalyzerLucene()
}

/**
 * A super simple test
 */
class ThaiAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[ThaiAnalyzerLucene] {
    val transformer = new ThaiAnalyzerLucene()
}

/**
 * A super simple test
 */
class TurkishAnalyzerLuceneTest
    extends LuceneStopwordTransformerTest[TurkishAnalyzerLucene] {
    val transformer = new TurkishAnalyzerLucene()
}
